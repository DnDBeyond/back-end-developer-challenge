package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"

	"github.com/k-nox/ddb-backend-developer-challenge/graph/generated"
	"github.com/k-nox/ddb-backend-developer-challenge/graph/model"
)

// DamageCharacter is the resolver for the damageCharacter field.
func (r *mutationResolver) DamageCharacter(ctx context.Context, input model.DamageInput) (*model.Character, error) {
	panic(fmt.Errorf("not implemented: DamageCharacter - damageCharacter"))
}

// HealCharacter is the resolver for the healCharacter field.
func (r *mutationResolver) HealCharacter(ctx context.Context, input model.HealInput) (*model.Character, error) {
	panic(fmt.Errorf("not implemented: HealCharacter - healCharacter"))
}

// AddTemporaryHitPoints is the resolver for the addTemporaryHitPoints field.
func (r *mutationResolver) AddTemporaryHitPoints(ctx context.Context, input model.HealInput) (*model.Character, error) {
	panic(fmt.Errorf("not implemented: AddTemporaryHitPoints - addTemporaryHitPoints"))
}

// Character is the resolver for the character field.
func (r *queryResolver) Character(ctx context.Context, id int) (*model.Character, error) {
	panic(fmt.Errorf("not implemented: Character - character"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
